<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.clubMember.dao.ClubMemberDAO">

<!-- 동아리 소속 부원(교수) -->
<select id="prfClubList" resultType="kr.or.ddit.student.vo.StudentVO" parameterType="String">
WITH STUDENT_INFO AS(<!-- 어떤 과의 학생 정보 --> 
SELECT STUDENT.ST_CD 
, STUDENT.DT_CD 
, ST_NM 
, ST_PH 
, ST_EMAIL 
, ST_PASS 
, ST_FIC 
, ST_LI_CRE 
, ST_STATUS 
, ST_ROLE 
, ST_ADDR1 
, ST_ADDR2 
, ST_REG1 
, ST_REG2 
, DT_NM  
FROM 
STUDENT
INNER JOIN DEPARTMENT ON STUDENT.DT_CD = DEPARTMENT.DT_CD)
, CLUB_INFO AS(<!-- 담당교수로 동아리코드 찾기 -->
SELECT DISTINCT
C.CLUB_CD 
FROM CLUB C 
INNER JOIN PROFESSOR P ON C.PR_CD = P.PR_CD
WHERE P.PR_CD=#{prCd}
)
SELECT <!-- 입부가 승인된 학생 정보 받기 --> 
  DISTINCT
  S.ST_CD 
  , S.ST_NM 
  , S.ST_PH 
  , S.ST_EMAIL 
  , S.ST_PASS 
  , S.ST_FIC 
  , S.ST_LI_CRE 
  , S.ST_STATUS 
  , S.ST_ROLE 
  , S.ST_ADDR1 
  , S.ST_ADDR2 
  , S.ST_REG1 
  , S.ST_REG2 
  , S.DT_NM 
  , CM.CLUB_MEM_CLASS
FROM CLUB_MEMBER CM
INNER JOIN STUDENT_INFO S ON CM.ST_CD = S.ST_CD 
INNER JOIN CLUB_INFO C ON CM.CLUB_CD = C.CLUB_CD
WHERE CM.CLUB_ENT_STA = '승인' 
ORDER BY
    CASE
        WHEN CLUB_MEM_CLASS = '부장' THEN 1
        ELSE 2
    END
</select>

<!-- 동아리 소속 부원(학생) -->
<select id="stuClubList" resultType="kr.or.ddit.student.vo.StudentVO" parameterType="String">
 WITH STUDENT_INFO AS(
SELECT DISTINCT
 STUDENT.ST_CD 
, STUDENT.DT_CD 
, ST_NM 
, ST_PH 
, ST_EMAIL 
, ST_PASS 
, ST_FIC 
, ST_LI_CRE 
, ST_STATUS 
, ST_ROLE 
, ST_ADDR1 
, ST_ADDR2 
, ST_REG1 
, ST_REG2 
, DT_NM  
FROM 
STUDENT
INNER JOIN DEPARTMENT ON STUDENT.DT_CD = DEPARTMENT.DT_CD)
, CLUB_INFO AS(
SELECT 
C.CLUB_CD 
FROM CLUB C 
INNER JOIN STUDENT S ON C.ST_CD = S.ST_CD
INNER JOIN CLUB_MEMBER CM ON C.CLUB_CD = CM.CLUB_CD
WHERE C.CLUB_CD=#{clubCd} AND CLUB_MEM_CLASS = '부장'
)
SELECT DISTINCT
  S.ST_CD 
  , S.ST_NM 
  , S.ST_PH 
  , S.ST_EMAIL 
  , S.ST_PASS 
  , S.ST_FIC 
  , S.ST_LI_CRE 
  , S.ST_STATUS 
  , S.ST_ROLE 
  , S.ST_ADDR1 
  , S.ST_ADDR2 
  , S.ST_REG1 
  , S.ST_REG2 
  , S.DT_NM 
  , CM.CLUB_MEM_CLASS
FROM CLUB_MEMBER CM
INNER JOIN STUDENT_INFO S ON CM.ST_CD = S.ST_CD 
INNER JOIN CLUB_INFO C ON CM.CLUB_CD = C.CLUB_CD 
WHERE CM.CLUB_ENT_STA = '승인' 
ORDER BY
    CASE
        WHEN CLUB_MEM_CLASS = '부장' THEN 1
        ELSE 2
    END
</select>

<!-- 동아리 입부신청 -->
<insert id="clubMemInsert" parameterType="kr.or.ddit.clubMember.vo.ClubMemberVO">
INSERT INTO CLUB_MEMBER (
CLUB_MEM_CD
, ST_CD
, CLUB_CD
, CLUB_APP_DATE
, CLUB_MEM_PLAN
, CLUB_APP_CON
, CLUB_ENT_STA
) VALUES(
CLUB_MEM_SEQ.NEXTVAL
, #{stCd,jdbcType=VARCHAR}
,#{clubCd,jdbcType=VARCHAR}
,SYSDATE
,#{clubMemPlan,jdbcType=VARCHAR}
,#{clubAppCon,jdbcType=VARCHAR}
,'신청')
</insert>

<sql id="searchFrag">
    <trim prefix=" WHERE ">
        <if test="simpleCondition neq null and simpleCondition.searchWord neq null and not simpleCondition.searchWord.isEmpty()">
            <choose>
                <when test="simpleCondition.searchType eq 'stCd'">
                    INSTR(ST_CD, #{simpleCondition.searchWord}) > 0 
                </when>
                <when test="simpleCondition.searchType eq 'stNm'">
                    INSTR(ST_NM, #{simpleCondition.searchWord}) > 0 
                </when>
                <when test="simpleCondition.searchType eq 'dtNm'">
                    INSTR(DT_NM, #{simpleCondition.searchWord}) > 0 
                </when>
                <otherwise>
                    INSTR(ST_CD, #{simpleCondition.searchWord}) > 0
                    OR
                    INSTR(ST_NM, #{simpleCondition.searchWord}) > 0
                    OR
                    INSTR(DT_NM, #{simpleCondition.searchWord}) > 0
                </otherwise>
            </choose>
        </if>
    </trim>
</sql>

<!-- 동아리 신청서 목록 갯수 -->
<select id="prfselectTotalRecord" resultType="long" >
 SELECT 
      COUNT(*)
    FROM STUDENT S
    INNER JOIN DEPARTMENT D ON S.DT_CD = D.DT_CD
    INNER JOIN CLUB_MEMBER C ON S.ST_CD = C.ST_CD
              WHERE CLUB_CD = #{clubCd} AND CLUB_ENT_STA='신청'
</select>

<!--(교수) 동아리 신청서 목록 -->
<select id="clubMemInsertList" resultType="kr.or.ddit.clubMember.vo.ClubMemberVO">
     SELECT B.* FROM(
      SELECT ROWNUM RNUM, A.*
          FROM(
        SELECT DISTINCT
        S.ST_CD
        , ST_NM
        , ST_PH
        , DT_NM
        , CLUB_ENT_STA
        , CLUB_APP_DATE
        , CLUB_CD
    FROM STUDENT S
    INNER JOIN DEPARTMENT D ON S.DT_CD = D.DT_CD
    INNER JOIN CLUB_MEMBER C ON S.ST_CD = C.ST_CD
              WHERE CLUB_CD = #{clubCd} AND CLUB_ENT_STA='신청'
              ORDER BY CLUB_APP_DATE DESC
          ) A
     )B
<![CDATA[
      WHERE RNUM >= #{paging.startRow} AND RNUM <=#{paging.endRow}
]]>

</select>

<!-- 동아리 가입 신청 세부사항 -->
<select id="clubMemInsertView" parameterType="String" resultType="kr.or.ddit.clubMember.vo.ClubMemberVO">
SELECT DISTINCT
C.ST_CD
,C.CLUB_CD
,ST_NM
,DT_NM
,ST_PH
,ST_EMAIL
,CLUB_APP_CON
,CLUB_MEM_PLAN
,CLUB_APP_DATE
FROM CLUB_MEMBER C
INNER JOIN(
SELECT ST_CD, ST_NM, DT_NM, ST_EMAIL,ST_PH
FROM STUDENT S INNER JOIN DEPARTMENT D ON S.DT_CD=D.DT_CD
) S ON C.ST_CD = S.ST_CD
WHERE C.ST_CD=#{stCd} AND C.CLUB_CD=#{clubCd} AND CLUB_ENT_STA='신청'
</select>

<!-- 학생 본인이 신청한 동아리 목록 -->
<select id="stuReqClubList" resultType="kr.or.ddit.common.vo.PaginationInfo">

WITH CLUB_INFO AS(
SELECT   
  C.CLUB_CD
  , C.CLUB_NM
  , C.CLUB_STATUS
  
  , P. PR_NM
  
  FROM CLUB C INNER JOIN PROFESSOR P ON C.PR_CD = P.PR_CD
)
SELECT B.* FROM (
 SELECT ROWNUM RNUM, A.* FROM(
SELECT
   C.CLUB_NM
  , C.CLUB_STATUS
  , C.PR_NM
  , S.ST_NM 
  , CM.ST_CD
  , CLUB_ENT_STA
  , CLUB_ENT_DATE
  , CLUB_MEM_CLASS
FROM
    CLUB_MEMBER CM INNER JOIN STUDENT S ON CM.ST_CD = S.ST_CD
    INNER JOIN CLUB_INFO C ON CM.CLUB_CD = C.CLUB_CD 
    WHERE CM.ST_CD = #{stCd}
    )A
  )B
  <![CDATA[
      WHERE RNUM >= #{paging.startRow} AND RNUM <=#{paging.endRow}
]]>
</select>
<!-- 학생 본인이 신청한 동아리 목록 수 -->
<select id="stuReqClubCount" parameterType="String" resultType="long">
WITH CLUB_INFO AS(
SELECT   
  C.CLUB_CD
  , C.CLUB_NM
  , C.CLUB_STATUS
  
  , P. PR_NM
  
  FROM CLUB C INNER JOIN PROFESSOR P ON C.PR_CD = P.PR_CD
)
SELECT
 COUNT(*)
FROM
    CLUB_MEMBER CM INNER JOIN STUDENT S ON CM.ST_CD = S.ST_CD
    INNER JOIN CLUB_INFO C ON CM.CLUB_CD = C.CLUB_CD 
    WHERE CM.ST_CD = #{stCd}
</select>


<!-- (학생) 부장인 학생 확인문 -->
<select id="stuClassCheck" parameterType="String" resultType="kr.or.ddit.clubMember.vo.ClubMemberVO">
    
SELECT CLUB_MEM_CLASS, ST_NM FROM
CLUB_MEMBER CM INNER JOIN
STUDENT S ON CM.ST_CD = S.ST_CD 
WHERE CM.ST_CD = #{stCd} AND CM.CLUB_ENT_STA = '승인'  AND CM.CLUB_CD=#{clubCd}
</select>

<!-- 입부학생 승인 -->
<update id="clubMemberInsertPass" parameterType="String">
UPDATE CLUB_MEMBER SET CLUB_ENT_STA = '승인', 
CLUB_MEM_CLASS = '부원', CLUB_ENT_DATE = SYSDATE WHERE ST_CD=#{stCd} AND CLUB_ENT_STA='신청'
</update>

<!-- 입부학생 거절 -->
<update id="clubMemberInsertNoPass" parameterType="String">
UPDATE CLUB_MEMBER SET CLUB_ENT_STA= '거절' , CLUB_ENT_DATE = SYSDATE WHERE ST_CD=#{stCd} AND CLUB_ENT_STA='신청'
</update>

<!-- 동아리 탈퇴 , 강제 탈퇴 -->
<update id="clubMemberWthdrClub" parameterType="String">
UPDATE CLUB_MEMBER SET CLUB_ENT_STA = '탈퇴' ,CLUB_SE_RE_DATE=SYSDATE WHERE ST_CD=#{stCd} AND CLUB_ENT_STA='승인'
AND CLUB_CD=#{clubCd}
</update>

<!-- 부장 탈퇴 -->
<update id="stuClassWthdrClub" parameterType="String">
UPDATE CLUB SET ST_CD = ''  WHERE ST_CD=#{stCd} AND CLUB_STATUS ='승인'
AND CLUB_CD=#{clubCd}
</update>

<!-- 동아리 탈퇴자 목록 (교수) -->
<select id="clubMemberWthdrClubList"  resultType="kr.or.ddit.clubMember.vo.ClubMemberVO">
 SELECT B.* FROM(
SELECT ROWNUM RNUM, A.* FROM(
SELECT DISTINCT
   ST_NM
  , ST_PH
  , DT_NM
  , CLUB_MEM_CLASS
  , CLUB_SE_RE_DATE
  FROM
   CLUB_MEMBER INNER JOIN STUDENT ON CLUB_MEMBER.ST_CD = STUDENT.ST_CD
            INNER JOIN DEPARTMENT ON STUDENT.DT_CD = DEPARTMENT.DT_CD
            INNER JOIN
            (SELECT PROFESSOR.PR_CD, CLUB.ST_CD FROM PROFESSOR INNER JOIN CLUB ON PROFESSOR.PR_CD = CLUB.PR_CD) P 
            ON STUDENT.ST_CD = P.ST_CD 
            INNER JOIN CLUB ON STUDENT.ST_CD=CLUB.ST_CD 
WHERE  CLUB_MEMBER.CLUB_CD=#{clubCd} AND CLUB_ENT_STA='탈퇴'
	)A
)B
<![CDATA[
      WHERE RNUM >= #{paging.startRow} AND RNUM <=#{paging.endRow}
]]>
</select>
<!-- 동아리 탈퇴자 수 (교수) -->
<select id="clubMemberWthdrClubCount" parameterType="String" resultType="long">

SELECT COUNT(DISTINCT STUDENT.ST_CD) AS STUDENT_COUNT
FROM STUDENT
INNER JOIN CLUB_MEMBER ON STUDENT.ST_CD = CLUB_MEMBER.ST_CD
INNER JOIN DEPARTMENT ON STUDENT.DT_CD = DEPARTMENT.DT_CD
INNER JOIN (
    SELECT DISTINCT PROFESSOR.PR_CD, CLUB.ST_CD
    FROM PROFESSOR
    INNER JOIN CLUB ON PROFESSOR.PR_CD = CLUB.PR_CD
) P ON STUDENT.ST_CD = P.ST_CD
INNER JOIN CLUB ON STUDENT.ST_CD = CLUB.ST_CD
WHERE CLUB_MEMBER.CLUB_CD = #{clubCd} AND CLUB_ENT_STA = '탈퇴'
</select>

<!-- 교수가 동아리 부장 변경 (강등)-->
<update id="clubHeadDownUpdate" parameterType="String">
	UPDATE CLUB_MEMBER SET CLUB_MEM_CLASS = '부원' WHERE CLUB_MEM_CLASS='부장' AND CLUB_ENT_STA='승인' AND CLUB_CD=#{clubCd}
</update>

<!-- 교수가 동아리 부장 변경 (승급) -->
<update id="clubHeadUpUpdate" parameterType="kr.or.ddit.club.vo.ClubVO">
	UPDATE CLUB_MEMBER SET CLUB_MEM_CLASS = '부장' WHERE ST_CD=(SELECT DISTINCT S.ST_CD FROM STUDENT S INNER JOIN CLUB_MEMBER CM ON S.ST_CD = CM.ST_CD 
         WHERE ST_NM=#{studentVO.stNm} AND CM.CLUB_CD = #{clubCd}) AND CLUB_ENT_STA='승인' AND CLUB_CD=#{clubCd}
</update>

<!-- <select id="clubMember" parameterMap="String" resultType="String">
 SELECT ST_CD
FROM (
    SELECT ST_CD
    FROM CLUB_MEMBER
    WHERE CLUB_MEM_CLASS = '부원' AND CLUB_ENT_STA = '승인' AND CLUB_CD =#{clubCd}
    <![CDATA[
    AND ROWNUM <= 1
    ]]>
)
</select> -->


</mapper>